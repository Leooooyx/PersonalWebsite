/**
 * Open Sans
 */
@import url(https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600&display=swap);
@keyframes fadeAndScale {
  from {
    opacity: 0;
    transform: scale(0.3, 0.3);
  }
  to {
    opacity: 1;
    transform: scale(1, 1);
  }
}
@keyframes fadeAndMoveUp {
  from {
    opacity: 0;
    margin-top: 50px;
  }
  to {
    opacity: 1;
    margin-top: 0;
  }
}
/**
 * Set up a decent box model on the root element
 */
html {
  box-sizing: border-box;
}

:host {
  display: block;
  position: relative;
  contain: strict;
  width: 300px;
  height: 150px;
}

@media (min-width: 1024px) {
  #canvas-div {
    height: 100%;
    width: 100%;
  }
}
/**
 * Make all elements from the DOM inherit from the parent box-sizing
 * Since `*` has a specificity of 0, it does not override the `html` value
 * making all elements inheriting from the root box-sizing value
 * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
*,
*::before,
*::after {
  box-sizing: inherit;
}

/**
 * Basic styles for links
 */
/**
 * Global Scroll Bar Style
 */
::-webkit-scrollbar-track {
  background-color: hsl(0deg, 0%, 84%);
}

::-webkit-scrollbar {
  width: 5px;
  background-color: hsl(0deg, 0%, 84%);
}

::-webkit-scrollbar-thumb {
  background-color: hsl(0deg, 0%, 37%);
}

/**
 * Basic typography style for copy text
 */
body {
  color: hsl(0deg, 0%, 13.3%);
}

p {
  margin: 0;
}

/**
 * Styles for text
 */
.viewer-text {
  font-family: "Open Sans", "Helvetica Neue Light", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-weight: 500;
}
.viewer-text.header-1 {
  font-size: 18px;
}
.viewer-text.header-2 {
  font-size: 14px;
}
.viewer-text.header-3 {
  font-size: 12px;
}
.viewer-text.body-1 {
  font-size: 14px;
  font-weight: 300;
}
.viewer-text.body-2 {
  font-size: 12px;
  font-weight: 300;
}
.viewer-text.body-3 {
  font-size: 12px;
}
.viewer-text.body-4 {
  font-size: 11px;
  font-weight: 300;
}
.viewer-text.body-5 {
  font-size: 11px;
  font-weight: 600;
}
.viewer-text.button-text {
  color: hsl(0deg, 0%, 100%);
  font-size: 11px;
}
.viewer-text.button-text-black {
  color: hsl(0deg, 0%, 0%);
  font-size: 11px;
}

/**
 * Text truncate
 */
.text-truncate {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: "";
  display: table;
}

/**
 * Main content containers
 * 1. Make the container full-width with a maximum width
 * 2. Center it in the viewport
 * 3. Leave some space on the edges, especially valuable on small screens
 */
.container {
  max-width: 1180px; /* 1 */
  margin-left: auto; /* 2 */
  margin-right: auto; /* 2 */
  padding-left: 20px; /* 3 */
  padding-right: 20px; /* 3 */
  width: 100%; /* 1 */
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0; /* 1 */
  text-indent: 101%;
  white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/**
 * Don't allow user the select the text
 */
.no-select {
  user-select: none;
}

.menu-button {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  margin: 0px 5px;
  cursor: pointer;
  transition: all 100ms ease;
  animation-duration: 1s;
  animation-name: fadeAndScale;
}
.menu-button:hover, .menu-button:focus {
  background-color: hsla(0deg, 0%, 100%, 0.9);
}
.menu-button:active {
  background-color: hsl(0deg, 0%, 28%);
}
.menu-button:active svg path {
  fill: hsl(0deg, 0%, 100%);
}

.expand-button {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  cursor: pointer;
}
.expand-button.collapsed path:nth-child(2) {
  transform: rotate(90deg) scale(0);
}

.button {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 10.5px;
  width: 267px;
  cursor: pointer;
  background-size: 200% 100%;
  background-image: linear-gradient(to right, hsl(0deg, 0%, 30%) 50%, hsl(0deg, 0%, 11%) 50%);
  -webkit-transition: background-position 1s;
  -moz-transition: background-position 1s;
  transition: background-position 1s;
  margin-bottom: 10px;
}
.button:hover, .button:focus {
  background-position: -100% 0;
}
.button:active {
  background-color: hsl(0deg, 0%, 11%);
}
.button.configure-button {
  background-image: linear-gradient(to right, hsl(0deg, 0%, 100%) 50%, hsl(0deg, 0%, 30%) 50%);
}
.button.configure-button:hover p, .button.configure-button:focus p {
  color: hsl(0deg, 0%, 100%);
}
.button.configure-button:active p {
  color: hsl(0deg, 0%, 100%);
}

.close-button {
  position: absolute;
  right: 0;
  height: 38px;
  width: 38px;
  cursor: pointer;
  z-index: 9000;
}

.text-button {
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  margin-right: 10px;
}
.text-button p {
  text-decoration: none;
  --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
  position: relative;
}
.text-button p::before, .text-button p::after {
  position: absolute;
  content: "";
  left: 0;
  bottom: -0.1rem;
  display: block;
  width: 100%;
  height: 1px;
  background: hsl(0deg, 0%, 0%);
  transition: 1.1s var(--ease-out-expo);
}
.text-button p::before {
  transform: scaleX(0);
  transform-origin: left;
}
.text-button p::after {
  transform-origin: right;
  transition-delay: 0.25s;
}
.text-button p:hover::before, .text-button p:focus::before {
  transform: scaleX(1);
  transition-delay: 0.25s;
}
.text-button p:hover::after, .text-button p:focus::after {
  transform: scaleX(0);
  transition-delay: 0s;
}

/*# sourceMappingURL=styles.css.map */
